# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-25 00:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DatabaseQuery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='This is what will be shown in the dropdown menu, so make sure this is clear.', max_length=200, unique=True)),
                ('model', models.CharField(help_text='Select the model to be queried.', max_length=200)),
                ('query', models.CharField(help_text='This will be evaluated directly and must return a QuerySet, not an individual object.  You have access to your model, its properties, the Q() object, and to datetime.  You do not have access most other builtin methods.', max_length=1000)),
                ('fields', models.TextField(blank=True, help_text="Optionally, add one field or property per line to be included in the output.  Use the '.' to access foreign key properties, and pass arguments to methods in parentheses.  Also, optionally put headers before an equals sign to define titles for the header row (e.g. for User class, 'Full Name'=get_full_name). If left blank, all fields will be exported.", null=True)),
                ('requiredGroup', models.ForeignKey(blank=True, help_text='Non superusers can only execute these pre-existing queries if they are in this stated group.  If missing, then only superusers will be able to access this query. Be mindful about giving access.', null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='Group Permission Required')),
            ],
            options={
                'permissions': (('run_database_query', 'Access database query page to download pre-specified queries from the database.'),),
                'verbose_name_plural': 'Database queries',
                'ordering': ('name',),
                'verbose_name': 'Database query',
            },
        ),
        migrations.CreateModel(
            name='RecommendedSong',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('artist', models.CharField(blank=True, max_length=50, null=True)),
                ('bpm', models.CharField(blank=True, help_text='Entering the BPM of the song (if you know it or can calculate it) is very helpful to students.', max_length=20, null=True)),
                ('album', models.CharField(blank=True, max_length=50, null=True)),
                ('itunesLink', models.CharField(blank=True, help_text='Optional: Give students a link to buy the song on iTunes.', max_length=100, null=True)),
                ('amazonLink', models.CharField(blank=True, help_text='Optional: Give students a link to buy the song on Amazon.', max_length=100, null=True)),
                ('genre', models.CharField(blank=True, choices=[('Swing', 'Swing'), ('Blues', 'Blues')], max_length=20, null=True)),
                ('comments', models.TextField(blank=True, help_text='Comments are for internal use only and are not displayed on the page.', null=True)),
                ('publish', models.BooleanField(default=True, help_text='Leave this box unchecked if you want someone to review your contribution before it is published.')),
                ('recommender', models.CharField(blank=True, help_text='Leave your name here (for internal use only.', max_length=30, null=True)),
            ],
            options={
                'ordering': ('title', 'artist'),
            },
        ),
    ]
